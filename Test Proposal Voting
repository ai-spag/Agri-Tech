use anchor_lang::prelude::*;
use anchor_lang::solana_program::system_program;
use anchor_lang::prelude::ProgramResult;
use solana_program_test::*;
use solana_sdk::{signature::Keypair, signer::Signer, transport::TransportError};

use crate::{entry, ID}; // Replace with your crate's entry point and ID

#[tokio::test]
async fn test_create_and_vote_proposal() -> Result<(), TransportError> {
    // Set up test environment
    let program_id = ID;
    let mut program_test = ProgramTest::new("agri_tech_dao", program_id, processor!(entry));

    let (mut banks_client, payer, recent_blockhash) = program_test.start().await;

    // Generate keypairs for user
    let user = Keypair::new();

    // Airdrop SOL to payer and user
    banks_client
        .transfer(&payer, &user.pubkey(), 1_000_000_000)
        .await?;

    // Prepare PDA for proposal account
    let proposal_pda = Pubkey::find_program_address(
        &[b"proposal", &user.pubkey().to_bytes()],
        &program_id,
    ).0;

    // TODO: Add CPI to call `create_proposal` instruction

    // TODO: Call `vote` instruction and assert new vote count

    // Validate state (replace with actual account deserialization)
    // let account = banks_client.get_account(proposal_pda).await?;
    // assert_eq!(account.data, expected_state);

    Ok(())
}
