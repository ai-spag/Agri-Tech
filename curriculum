// Smart contract snippets and curriculum codes for Agri-Tech Pioneers. (Solana + Rust)

// -------------------------------
// contracts/crop_cycle_dao.rs
// DAO Voting for Crop Cycles
// -------------------------------
use anchor_lang::prelude::*;

#[program]
pub mod crop_cycle_dao {
    use super::*;

    pub fn initialize_voting(ctx: Context<InitializeVoting>, crop_name: String) -> Result<()> {
        let vote = &mut ctx.accounts.vote;
        vote.crop_name = crop_name;
        vote.yes_votes = 0;
        vote.no_votes = 0;
        Ok(())
    }

    pub fn cast_vote(ctx: Context<CastVote>, approve: bool) -> Result<()> {
        let vote = &mut ctx.accounts.vote;
        if approve {
            vote.yes_votes += 1;
        } else {
            vote.no_votes += 1;
        }
        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitializeVoting<'info> {
    #[account(init, payer = user, space = 8 + 64)]
    pub vote: Account<'info, Vote>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct CastVote<'info> {
    #[account(mut)]
    pub vote: Account<'info, Vote>,
    pub user: Signer<'info>,
}

#[account]
pub struct Vote {
    pub crop_name: String,
    pub yes_votes: u64,
    pub no_votes: u64,
}


// -------------------------------
// contracts/tokenized_crop_sale.rs
// Tokenized Crop Sales
// -------------------------------
use anchor_lang::prelude::*;

#[program]
pub mod tokenized_crop_sale {
    use super::*;

    pub fn list_crop(ctx: Context<ListCrop>, name: String, price: u64) -> Result<()> {
        let crop = &mut ctx.accounts.crop;
        crop.name = name;
        crop.price = price;
        crop.seller = ctx.accounts.seller.key();
        Ok(())
    }
}

#[derive(Accounts)]
pub struct ListCrop<'info> {
    #[account(init, payer = seller, space = 8 + 64 + 8 + 32)]
    pub crop: Account<'info, Crop>,
    #[account(mut)]
    pub seller: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct Crop {
    pub name: String,
    pub price: u64,
    pub seller: Pubkey,
}


// -------------------------------
// contracts/lease_vertical_planter.rs
// Leasing Vertical Planters
// -------------------------------
use anchor_lang::prelude::*;

#[program]
pub mod lease_vertical_planter {
    use super::*;

    pub fn lease_planter(ctx: Context<LeasePlanter>, duration: u64, lease_fee: u64) -> Result<()> {
        let lease = &mut ctx.accounts.lease;
        lease.leasee = ctx.accounts.leasee.key();
        lease.duration = duration;
        lease.lease_fee = lease_fee;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct LeasePlanter<'info> {
    #[account(init, payer = leasee, space = 8 + 32 + 8 + 8)]
    pub lease: Account<'info, Lease>,
    #[account(mut)]
    pub leasee: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct Lease {
    pub leasee: Pubkey,
    pub duration: u64,
    pub lease_fee: u64,
}


// -------------------------------
// curriculums/blockchain_agritech_curriculum.md
// -------------------------------
// Curriculum Outline

// Week 1: Introduction to Blockchain in Agriculture
// Lecture: History, trustless ledgers, and transparency
// Exploration: Use Solana explorer to browse transactions

// Week 2: Wallet Setup & Token Fundamentals
// Lecture: Keypairs, token standards
// Exploration: Setup Phantom wallet and receive test tokens

// Week 3: Solana & Rust Smart Contracts Basics
// Lecture: What are smart contracts?
// Exploration: Modify and deploy a voting contract on Devnet

// Week 4: Crop Tracking with Smart Contracts
// Lecture: State management on-chain
// Exploration: Simulate tokenized crop tracking

// Week 5: DAO & Voting
// Lecture: Governance, transparency
// Exploration: Build a class DAO to vote on crops to grow

// Week 6: IoT Sensors + Data Logging
// Lecture: Off-chain data and oracles
// Exploration: Integrate mock pH data into on-chain logs

// Week 7: Tokenized Sales
// Lecture: Marketplaces & escrow
// Exploration: Create sample listings using tokenized_crop_sale.rs

// Week 8: Leasing Smart Contracts
// Lecture: Rental contracts in agriculture
// Exploration: Deploy vertical planter leasing contract

// Week 9–10: Data Dashboards & Admin Tools
// Lecture: Front-end dashboards, tracking contracts
// Exploration: Use GraphQL to query Solana and visualize crop data

// Week 11: Scaling and DAO Treasury Management
// Lecture: Managing funds and project growth
// Exploration: Mock voting on community funds for sensor purchases

// Week 12: Supply Chains & Traceability
// Lecture: QR codes, logistics, supply transparency
// Exploration: Simulate supply chain from field to sale using logs

// Week 13–14: Showcase
// Demo vertical farming system + DAO-powered market
// Invite investors/community members to watch student presentations
