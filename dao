import React, { useState, useEffect } from 'react';
import { Connection, PublicKey } from '@solana/web3.js';
import { useWallet, WalletMultiButton } from '@solana/wallet-adapter-react-ui';
import { Program, AnchorProvider, web3, utils, BN } from '@project-serum/anchor';

// Dummy placeholder to simulate IDL content
const dummyIdl = {
  "metadata": {
    "address": "INSERT_REAL_PROGRAM_ID_HERE"
  },
  "accounts": [
    {
      "name": "cropProposal",
      "type": {
        "kind": "struct",
        "fields": [
          { "name": "name", "type": "string" },
          { "name": "votes", "type": "u32" }
        ]
      }
    }
  ],
  "instructions": []
};

const programID = new PublicKey(dummyIdl.metadata.address);
const network = 'https://api.devnet.solana.com';
const opts = {
  preflightCommitment: 'processed'
};

function App() {
  const wallet = useWallet();
  const [program, setProgram] = useState(null);
  const [cropName, setCropName] = useState('');
  const [proposals, setProposals] = useState([]);

  const getProvider = () => {
    const connection = new Connection(network, opts.preflightCommitment);
    return new AnchorProvider(connection, wallet, opts);
  };

  const fetchProgram = async () => {
    const provider = getProvider();
    const program = new Program(dummyIdl, programID, provider);
    setProgram(program);
  };

  const fetchProposals = async () => {
    if (!program) return;
    try {
      const allProposals = await program.account.cropProposal.all();
      setProposals(allProposals);
    } catch (err) {
      console.error('Error fetching proposals:', err);
    }
  };

  const submitProposal = async () => {
    const provider = getProvider();
    const [proposalPda] = await PublicKey.findProgramAddress(
      [utils.bytes.utf8.encode('proposal'), wallet.publicKey.toBuffer()],
      program.programId
    );

    await program.methods
      .createProposal(cropName)
      .accounts({
        proposal: proposalPda,
        user: wallet.publicKey,
        systemProgram: web3.SystemProgram.programId
      })
      .rpc();

    setCropName('');
    fetchProposals();
  };

  const castVote = async (proposalPubkey) => {
    await program.methods
      .vote()
      .accounts({
        proposal: proposalPubkey,
        user: wallet.publicKey
      })
      .rpc();
    fetchProposals();
  };

  useEffect(() => {
    if (wallet.connected) {
      fetchProgram();
    }
  }, [wallet.connected]);

  useEffect(() => {
    if (program) {
      fetchProposals();
    }
  }, [program]);

  return (
    <div style={{ fontFamily: 'Arial, sans-serif', padding: '20px' }}>
      <h1>ðŸŒ¿ Agri-Tech DAO</h1>
      <WalletMultiButton />

      <div style={{ marginTop: '20px' }}>
        <input
          type="text"
          placeholder="Enter crop name"
          value={cropName}
          onChange={(e) => setCropName(e.target.value)}
        />
        <button onClick={submitProposal} style={{ marginLeft: '10px' }}>Submit Proposal</button>
      </div>

      <h2 style={{ marginTop: '40px' }}>ðŸ—³ DAO Crop Proposals</h2>
      <table border="1" cellPadding="10" style={{ width: '100%', marginTop: '10px' }}>
        <thead>
          <tr>
            <th>Crop</th>
            <th>Votes</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {proposals.map((item, index) => (
            <tr key={index}>
              <td>{item.account.name}</td>
              <td>{item.account.votes.toString()}</td>
              <td>
                <button onClick={() => castVote(new PublicKey(item.publicKey.toBase58()))}>Vote</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default App;
