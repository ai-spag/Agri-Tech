// contracts/dao_voting/src/lib.rs
use anchor_lang::prelude::*;

declare_id!("DaoVot3Crop1111111111111111111111111111111111111");

#[program]
pub mod dao_voting {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>, crop_name: String) -> Result<()> {
        let vote_state = &mut ctx.accounts.vote_state;
        vote_state.crop_name = crop_name;
        vote_state.yes_votes = 0;
        vote_state.no_votes = 0;
        Ok(())
    }

    pub fn vote(ctx: Context<Vote>, approve: bool) -> Result<()> {
        let vote_state = &mut ctx.accounts.vote_state;
        if approve {
            vote_state.yes_votes += 1;
        } else {
            vote_state.no_votes += 1;
        }
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer = user, space = 8 + 64 + 8 + 8)]
    pub vote_state: Account<'info, VoteState>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct Vote<'info> {
    #[account(mut)]
    pub vote_state: Account<'info, VoteState>,
}

#[account]
pub struct VoteState {
    pub crop_name: String,
    pub yes_votes: u64,
    pub no_votes: u64,
}
