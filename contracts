// contracts/leasing/src/lib.rs
use anchor_lang::prelude::*;

declare_id!("LeasePlanters1111111111111111111111111111111111");

#[program]
pub mod leasing {
    use super::*;

    pub fn initialize_planter(ctx: Context<InitializePlanter>, lease_rate: u64) -> Result<()> {
        let planter = &mut ctx.accounts.planter;
        planter.owner = *ctx.accounts.user.key;
        planter.lease_rate = lease_rate;
        planter.current_lessee = None;
        Ok(())
    }

    pub fn lease_planter(ctx: Context<LeasePlanter>) -> Result<()> {
        let planter = &mut ctx.accounts.planter;
        planter.current_lessee = Some(*ctx.accounts.lessee.key);
        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitializePlanter<'info> {
    #[account(init, payer = user, space = 8 + 32 + 8 + 32)]
    pub planter: Account<'info, PlanterUnit>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct LeasePlanter<'info> {
    #[account(mut)]
    pub planter: Account<'info, PlanterUnit>,
    pub lessee: Signer<'info>,
}

#[account]
pub struct PlanterUnit {
    pub owner: Pubkey,
    pub lease_rate: u64,
    pub current_lessee: Option<Pubkey>,
}
