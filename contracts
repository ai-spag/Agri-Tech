use anchor_lang::prelude::*;

// Program ID must match what's used during deployment
#[program]
pub mod crop_tracking {
    use super::*;

    pub fn initialize_crop(ctx: Context<InitializeCrop>, crop_type: String, planting_date: i64) -> Result<()> {
        let crop = &mut ctx.accounts.crop;
        crop.owner = *ctx.accounts.authority.key;
        crop.crop_type = crop_type;
        crop.planting_date = planting_date;
        crop.growth_stage = "Seeded".to_string();
        crop.harvested = false;
        Ok(())
    }

    pub fn update_growth_stage(ctx: Context<UpdateGrowthStage>, new_stage: String) -> Result<()> {
        let crop = &mut ctx.accounts.crop;
        crop.growth_stage = new_stage;
        Ok(())
    }

    pub fn mark_harvested(ctx: Context<HarvestCrop>) -> Result<()> {
        let crop = &mut ctx.accounts.crop;
        crop.harvested = true;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitializeCrop<'info> {
    #[account(init, payer = authority, space = 8 + 128)]
    pub crop: Account<'info, Crop>,
    #[account(mut)]
    pub authority: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct UpdateGrowthStage<'info> {
    #[account(mut, has_one = owner)]
    pub crop: Account<'info, Crop>,
    pub owner: Signer<'info>,
}

#[derive(Accounts)]
pub struct HarvestCrop<'info> {
    #[account(mut, has_one = owner)]
    pub crop: Account<'info, Crop>,
    pub owner: Signer<'info>,
}

#[account]
pub struct Crop {
    pub owner: Pubkey,
    pub crop_type: String,
    pub planting_date: i64,
    pub growth_stage: String,
    pub harvested: bool,
}
